//1. До рефакторинга.
Воспользовался плагином в IntellijIdea MetricsReloaded, для оценки метрик:
- Essential cyclomatic complexity;
- Design complexity;
- cyclomatic complexity;
- cognitive complexity.

Essential cyclomatic complexity = 13
cyclomatic complexity = 24

@Override
    public int getItemViewType(int section, int position) {
        HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = onlyUsers == 2 ? ContactsController.getInstance(currentAccount).usersMutualSectionsDict : ContactsController.getInstance(currentAccount).usersSectionsDict;
        ArrayList<String> sortedUsersSectionsArray = onlyUsers == 2 ? ContactsController.getInstance(currentAccount).sortedUsersMutualSectionsArray : ContactsController.getInstance(currentAccount).sortedUsersSectionsArray;
        if (onlyUsers != 0 && !isAdmin) {
            if (isEmpty) {
                return 4;
            }
            ArrayList<TLRPC.TL_contact> arr = usersSectionsDict.get(sortedUsersSectionsArray.get(section));
            return position < arr.size() ? 0 : 3;
        } else {
            if (section == 0) {
                if (isAdmin) {
                    if (position == 1) {
                        return 2;
                    }
                } else if (needPhonebook) {
                    if (hasGps && position == 2 || !hasGps && position == 1) {
                        return isEmpty ? 5 : 2;
                    }
                } else if (position == 3) {
                    return isEmpty ? 5 : 2;
                }
            } else {
                if (isEmpty) {
                    return 4;
                }
                if (sortType == SORT_TYPE_BY_TIME) {
                    if (section == 1) {
                        return position < onlineContacts.size() ? 0 : 3;
                    }
                } else {
                    if (section - 1 < sortedUsersSectionsArray.size()) {
                        ArrayList<TLRPC.TL_contact> arr = usersSectionsDict.get(sortedUsersSectionsArray.get(section - 1));
                        return position < arr.size() ? 0 : 3;
                    }
                }
            }
        }
        return 1;
    }



//2. После рефакторинга 
- getItemViewType стала 5,
- getOnlyUsersViewType = 3
- getGeneralViewType = 2
- createViewTypeStrategyMap = 2
Убрал условные операторы, разбил монолитный метод, сделал методы небольшими. Вынес логику формирования ViewType на верхний уровень абстракции, воспользовавшись полиморфизмом в Java и паттерном "Стратегия"

Код:

  public int getItemViewType(int section, int position) {
        HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict = onlyUsers == 2 ? ContactsController.getInstance(currentAccount).usersMutualSectionsDict : ContactsController.getInstance(currentAccount).usersSectionsDict;
        ArrayList<String> sortedUsersSectionsArray = onlyUsers == 2 ? ContactsController.getInstance(currentAccount).sortedUsersMutualSectionsArray : ContactsController.getInstance(currentAccount).sortedUsersSectionsArray;

        if (onlyUsers != 0 && !isAdmin) {
            return getOnlyUsersViewType(section, position, usersSectionsDict, sortedUsersSectionsArray);
        }
        return getGeneralViewType(section, position);
    }

    private int getOnlyUsersViewType(int section, int position, HashMap<String, ArrayList<TLRPC.TL_contact>> usersSectionsDict, ArrayList<String> sortedUsersSectionsArray) {
        ArrayList<TLRPC.TL_contact> arr = usersSectionsDict.get(sortedUsersSectionsArray.get(section));
        return isEmpty ? 4 : (position < arr.size() ? 0 : 3);
    }

    private int getGeneralViewType(int section, int position) {
        HashMap<Pair<Integer, Integer>, ViewTypeStrategy> viewTypeStrategyMap = createViewTypeStrategyMap(section, position);

        ViewTypeStrategy viewTypeStrategy = viewTypeStrategyMap.get(new Pair<>(section, position));
        return viewTypeStrategy != null ? viewTypeStrategy.getViewType() : 1;
    }

    private HashMap<Pair<Integer, Integer>, ViewTypeStrategy> createViewTypeStrategyMap(
            int section,
            int position
    ) {
        HashMap<Pair<Integer, Integer>, ViewTypeStrategy> viewTypeStrategyMap = new HashMap<>();

        viewTypeStrategyMap.put(new Pair<>(0, 1), new GetViewTypeForAdmin(section, position));
        viewTypeStrategyMap.put(new Pair<>(0, hasGps ? 2 : 1), new GetViewTypeForPhonebook(section, position, hasGps));
            viewTypeStrategyMap.put(new Pair<>(0, 3), new ViewTypeForNoPhonebook(section, position));
    viewTypeStrategyMap.put(new Pair<>(section, position), new ViewTypeForEmpty(section, position, isEmpty, needPhonebook, hasGps));
        // Опустил другие реализации ViewTypeStrategy для получения необходимого ViewType.

        return viewTypeStrategyMap;
    }


public interface ViewTypeStrategy {
    Integer getViewType();
}

public class GetViewTypeForZeroSection implements ViewTypeStrategy {
    private final int section;
    private final int position;
    private final boolean isEmpty;

    GetViewTypeForZeroSection(int section, int position, boolean isEmpty) {
        this.section = section;
        this.position = position;
        this.isEmpty = isEmpty;
    }

    @Override
    public Integer getViewType() {
        if (section == 0 && position == 3) {
            return isEmpty ? 5 : 2;
        }
        return null;
    }
}

public class GetViewTypeIfEmpty implements ViewTypeStrategy {
    private final int section;
    private final boolean isEmpty;

    public GetViewTypeIfEmpty(int section, boolean isEmpty) {
        this.section = section;
        this.isEmpty = isEmpty;
    }

    @Override
    public Integer getViewType() {
        return (section != 0 && isEmpty) ? 4 : null;
    }
}

//опущу оставшиеся реализации ViewTypeStrategy...



//3. До рефакторинга:
- Essential cyclomatic complexity = 7
- cyclomatic complexity = 11
    private void addStickersToResult(ArrayList<TLRPC.Document> documents, Object parent) {
        if (documents == null || documents.isEmpty()) {
            return;
        }
        for (int a = 0, size = documents.size(); a < size; a++) {
            TLRPC.Document document = documents.get(a);
            String key = document.dc_id + "_" + document.id;
            if (stickersMap != null && stickersMap.containsKey(key)) {
                continue;
            }
            if (!UserConfig.getInstance(currentAccount).isPremium() && MessageObject.isPremiumSticker(document)) {
                continue;
            }
            for (int b = 0, size2 = document.attributes.size(); b < size2; b++) {
                TLRPC.DocumentAttribute attribute = document.attributes.get(b);
                if (attribute instanceof TLRPC.TL_documentAttributeSticker) {
                    parent = attribute.stickerset;
                    break;
                }
            }
            if (stickers == null) {
                stickers = new ArrayList<>();
                stickersMap = new HashMap<>();
            }
            stickers.add(new StickerResult(document, parent));
            stickersMap.put(key, document);
        }
    }

//4. После рефакторинга:
- Essential complexity = 3
- cyclomatic complexity = 4.

Убрал инициализацию в отдельный метод. Сократил количество условных операторов из цикла, перейдя на Java Streams. Заменил стандартную конструкцию цикла на forEach.

private void addStickersToResultNew(ArrayList<TLRPC.Document> documents, Object parent) {
        if (documents == null || documents.isEmpty()) {
            return;
        }

        initStickersIfNeed();

        UserConfig userConfig = UserConfig.getInstance(currentAccount);

        documents.stream()
                .filter(document -> {
                    String key = document.dc_id + "_" + document.id;
                    if (!isValidKeyAndNotPremium(document, key, userConfig)) {
                        return false;
                    }

                    List<TLRPC.DocumentAttribute> attributes = document.attributes;
                    attributes.stream()
                            .filter(attr -> attr instanceof TLRPC.TL_documentAttributeSticker)
                            .findFirst()
                            .flatMap((Function<TLRPC.TL_documentAttributeSticker, Optional<?>>) attr -> {
                                parent = attr.stickerset;
                                return Optional.ofNullable(attr);
                            }).isPresent();
                    return false;
                }).forEach(document -> {
                    String key = document.dc_id + "_" + document.id;
                    stickers.add(new StickerResult(document, parent));
                    stickersMap.put(key, document);
                });
    }

    private void initStickersIfNeed() {
        if (stickers == null) {
            stickers = new ArrayList<>();
            stickersMap = new HashMap<>();
        }
    }

//5. До рефакторинга
- Essential cyclomatic complexity = 9
- cyclomatic complexity = 18

public void toggleUsername(int position, boolean newActive, boolean shake) {
        if (position - 4 < 0 || position - 4 >= usernames.size()) {
            return;
        }
        TLRPC.TL_username username = usernames.get(position - 4);
        if (username == null) {
            return;
        }

        int toIndex = -1;
        if (username.active = newActive) {
            int firstInactive = -1;
            for (int i = 0; i < usernames.size(); ++i) {
                if (!usernames.get(i).active) {
                    firstInactive = i;
                    break;
                }
            }
            if (firstInactive >= 0) {
                toIndex = 4 + Math.max(0, firstInactive - 1);
            }
        } else {
            int lastActive = -1;
            for (int i = 0; i < usernames.size(); ++i) {
                if (usernames.get(i).active) {
                    lastActive = i;
                }
            }
            if (lastActive >= 0) {
                toIndex = 4 + Math.min(usernames.size() - 1, lastActive + 1);
            }
        }

        if (listView != null) {
            for (int i = 0; i < listView.getChildCount(); ++i) {
                View child = listView.getChildAt(i);
                if (listView.getChildAdapterPosition(child) == position) {
                    if (shake) {
                        AndroidUtilities.shakeView(child);
                    }
                    if (child instanceof ChangeUsernameActivity.UsernameCell) {
                        ((ChangeUsernameActivity.UsernameCell) child).setLoading(loadingUsernames.contains(username.username));
                        ((ChangeUsernameActivity.UsernameCell) child).update();
                    }
                    break;
                }
            }
        }

        if (toIndex >= 0 && position != toIndex) {
            adapter.moveElement(position, toIndex);
        }
    }


//6. После рефакторинга. У toggleUsernameNew:
- Essential cyclomatic complexity = 2
- cyclomatic complexity = 3.
У вспомогательных методов самая высокая у updateListView:
- Essential cyclomatic complexity = 4
- cyclomatic complexity = 6. 

ЦС распределилась между методами, когнитивная сложность была снижена, код стал читабельнее и ЦС основного метода была снижена.
Здесь использовались приемы избавления от else блоков, разбиение большой функции на небольшие, повышение уровня условных операторов.


public void toggleUsernameNew(int position, boolean newActive, boolean shake) {
        TLRPC.TL_username username = getUsernames(position - 4);
        if (username == null) {
            return;
        }

        int toIndex = getToIndex(username, newActive);

        updateListView(position, shake, username);

        if (shouldMoveElement(position, toIndex)) {
            adapter.moveElement(position, toIndex);
        }
    }

    private TLRPC.TL_username getUsernames(int index) {
        if (index < 0 || index >= usernames.size()) 
            return null;

        return usernames.get(index);
    }

    private int getToIndex(TLRPC.TL_username username, boolean newActive) {
        if (username.active = newActive) 
            return getFirstInactiveIndex();

        return getLastActiveIndex();
    }

    private int getFirstInactiveIndex() {
        int firstInactive = -1;
        for (int i = 0; i < usernames.size(); ++i) {
            if (!usernames.get(i).active) {
                firstInactive = i;
                break;
            }
        }
        if (firstInactive >= 0) {
            return 4 + Math.max(0, firstInactive - 1);
        }
        return -1;
    }

    private int getLastActiveIndex() {
        int lastActive = -1;
        for (int i = 0; i < usernames.size(); ++i) {
            if (usernames.get(i).active) {
                lastActive = i;
            }
        }
        if (lastActive >= 0) {
            return 4 + Math.min(usernames.size() - 1, lastActive + 1);
        }
        return -1;
    }

    private void updateListView(int position, boolean shake, TLRPC.TL_username username) {
        if (listView != null) {

            for (int i = 0; i < listView.getChildCount(); ++i) {
                View child = listView.getChildAt(i);
                if (listView.getChildAdapterPosition(child) == position) {
                    if (shake) {
                        AndroidUtilities.shakeView(child);
                    }
                    if (child instanceof ChangeUsernameActivity.UsernameCell) {
                        ((ChangeUsernameActivity.UsernameCell) child).setLoading(loadingUsernames.contains(username.username));
                        ((ChangeUsernameActivity.UsernameCell) child).update();
                    }
                    break;
                }
            }
        }
    }

    private boolean shouldMoveElement(int position, int toIndex) {
        return toIndex >= 0 && position != toIndex;
    }